# ENVIRONMENT MANAGEMENT
pipenv install
- Creates a virtual environment and installs packages specified in Pipfile. If Pipfile doesn't exist, it creates one.

pipenv install <package_name>
- Installs a specific package into the virtual environment and adds it to Pipfile.

pipenv install <package_name> --dev
- Installs a specific package as a development dependency and adds it to Pipfile.

pipenv install -e .
- Installs the current project in editable mode, useful for development.

pipenv uninstall <package_name>
- Uninstalls a package from the virtual environment and removes it from Pipfile.

pipenv uninstall --all
- Uninstalls all packages from the virtual environment (except pipenv itself).

pipenv uninstall --all-dev
- Uninstalls all development packages from the virtual environment.

pipenv lock
- Generates a Pipfile.lock file, which contains the exact versions of all dependencies.  Crucial for reproducible builds.

pipenv update
- Updates all packages to the latest versions that satisfy the Pipfile specifications.  Regenerates the Pipfile.lock.

pipenv update <package_name>
- Updates a specific package to the latest version that satisfies the Pipfile specification. Regenerates the Pipfile.lock.

pipenv graph
- Displays the dependency graph of the project's packages.

pipenv check
- Checks for security vulnerabilities in the installed packages.

pipenv clean
- Uninstalls any packages that are not listed as dependencies in the Pipfile.

# VIRTUAL ENVIRONMENT CONTROL
pipenv shell
- Activates the virtual environment in a new shell.

exit
- Deactivates the virtual environment (when in shell).

pipenv run <command>
- Runs a command within the virtual environment.  For example, pipenv run python my_script.py.

pipenv --venv
- Prints the path to the virtual environment.

pipenv --rm
- Removes the virtual environment.

# SCRIPTING
pipenv install --python 3.8
- Creates a virtual environment using python 3.8.  Can also specify a python version when the environment already exists to recreate it

pipenv run python -m pytest
- Runs the pytest library within the virtual environment

pipenv run python
- Starts the python interpreter within the virtual environment

pipenv sync
- Installs all packages from Pipfile.lock.  Useful to recreate a project's environment given Pipfile.lock

# FILE MANAGEMENT
Pipfile
- Contains a list of your project's dependencies and their version constraints. Similar to requirements.txt but more powerful.
    - Stored in TOML format

Pipfile.lock
- Contains the exact versions of all dependencies, including transitive dependencies.  Ensures reproducible builds.
    - Stored in JSON format

# UTILITY
pipenv --help
- Shows a list of available commands and options.

pipenv --version
- Shows the installed pipenv version.

# WORKING WITH requirements.txt

pipenv install -r requirements.txt
- Installs packages from requirements.txt and creates/updates Pipfile and Pipfile.lock.

pipenv run pip freeze > requirements.txt
- Creates a requirements.txt file based on the currently installed packages in the virtual environment, *after* running pipenv shell or pipenv run.  Consider pipenv lock and Pipfile.lock for a more robust solution. Only use this if migrating to other setups from pipenv or similar tasks.
