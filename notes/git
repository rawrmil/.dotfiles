##passwd
git config --global credential.helper store

##setup
git config --global user.name "FIRSTNAME LASTNAME"
git config --global user.email "EMAIL"

##repo

git init
# - init default
git init --bare
# - init bare (like on server)
git clone [URL]
git clone git@[IP]:~/[REPO]
git clone ssh://[IP]:[PORT]/[REPO]

##stage

git add [FILE]
git add .
git add -p .
# - add changes to the stage (file, all, patch mode)
git restore --staged .
# - unstage

#commits

git commit -m "[DESCRIPTIVE MESSAGE]"
# - commit
git reset --soft HEAD~1
# - undo commit
git commit --amend
# - rename last commit

#BRANCHES

git branch
# - list branches
git branch [NAME]
# - create new branch
git branch -d [NAME]
# - delete local branch
git push -d [REMOTE_NAME] [BRANCH_NAME]
# - delete remote branch

git checkout [NAME]
# - change branch

git checkout -b NEW_BRANCH OLD_BRANCH
# - clone branch


##inspection
diff file1 file2
git diff file1
# - difference from last commit
# - can add '--staged' flag
git diff [BRANCH_A]..[BRANCH_B]
# - show diff of what on A that are not on B

git log
- list all the commits in current branch
git log [BRANCH_A]..[BRANCH_B]
- show commits to A that are not on B

git log --follow [FILE]
- show commit that changed file even across renames
git log --stat -M
- show all commit logs with indication of any paths that moved

git show [SHA_CODE]
- show information about object in human-readable format
git show
git show HEAD
- show current commit
git show HEAD^
- show parent of current commit
git show [BRANCH_NAME]
- show last commit on branch
git show [FILE_NAME]

#remote

git remote add [ALIAS] [URL]
# - add remote repo
# - [ALIAS] better be "origin"

git push --set-upstream origin master

git fetch [ALIAS]
# - fetch down all the branches from that Git remote

git merge [ALIAS]/[BRANCH]
# - merge remote branch into tracking branch

git pull
# - fetch and merge any commits from the tracking remote branch
git push [ALIAS] [BRANCH]
# - transmit all branch commits

git rm [FILE]
# - delete the file from project and stage the removal for commit

git mv [SRC] [DST]
- change an existing file path and stage the move

#stashes

git stash
- save modified & staged changes
git stash list
- list stack-order of stashed file changes
git stash pop
- write working from top of stash stack
git stash drop
- discard the changes from top of stash stack
git stash push -u -m "My descriptive stash message"
- save the current stash to remote

#history

git rebase [branch]
- apply any commits of current branch ahead of specified one

git reset --hard [commit]
- clear staging area, rewrite working tree from specified commit

#version
Tags are immutable pointers to a specific commit, marking a version

git tag -a v1.0.0 -m "Release v1.0.0"
- create a tag
git push origin --tags
- push tags
Semantic Versioning (SemVer): Use a versioning scheme like SemVer (e.g., MAJOR.MINOR.PATCH) to indicate the type of changes made in each release.

#orphan branches
git checkout --orphan [BRANCHNAME]
git commit --allow-empty -m "Initial commit"
git push -u origin [BRANCHNAME]

#.SUBMODULES
git submodule add URL PATH
# - create
git clone --recursive-submodules URL
# - pull with clone
git submodule init; git submodule update
git submodule update --init --recursive
# - pull after clone
git submodule update --remote --merge
# - pull latest changes
git submodule deinit -f PATH
git rm -f PATH
rm -rf .git/modules/PATH
# - delete

#squash
g rebase -i HEAD~2
# - do this and change second to squash
